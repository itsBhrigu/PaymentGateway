// Code generated by MockGen. DO NOT EDIT.
// Source: api/router/service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	router "paymentGateway/api/router"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRouterClient is a mock of RouterClient interface.
type MockRouterClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouterClientMockRecorder
}

// MockRouterClientMockRecorder is the mock recorder for MockRouterClient.
type MockRouterClientMockRecorder struct {
	mock *MockRouterClient
}

// NewMockRouterClient creates a new mock instance.
func NewMockRouterClient(ctrl *gomock.Controller) *MockRouterClient {
	mock := &MockRouterClient{ctrl: ctrl}
	mock.recorder = &MockRouterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterClient) EXPECT() *MockRouterClientMockRecorder {
	return m.recorder
}

// Route mocks base method.
func (m *MockRouterClient) Route(ctx context.Context, in *router.RouteRequest, opts ...grpc.CallOption) (*router.RouteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Route", varargs...)
	ret0, _ := ret[0].(*router.RouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Route indicates an expected call of Route.
func (mr *MockRouterClientMockRecorder) Route(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouterClient)(nil).Route), varargs...)
}

// SetRoutingRule mocks base method.
func (m *MockRouterClient) SetRoutingRule(ctx context.Context, in *router.SetRoutingRuleRequest, opts ...grpc.CallOption) (*router.SetRoutingRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRoutingRule", varargs...)
	ret0, _ := ret[0].(*router.SetRoutingRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRoutingRule indicates an expected call of SetRoutingRule.
func (mr *MockRouterClientMockRecorder) SetRoutingRule(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoutingRule", reflect.TypeOf((*MockRouterClient)(nil).SetRoutingRule), varargs...)
}

// MockRouterServer is a mock of RouterServer interface.
type MockRouterServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouterServerMockRecorder
}

// MockRouterServerMockRecorder is the mock recorder for MockRouterServer.
type MockRouterServerMockRecorder struct {
	mock *MockRouterServer
}

// NewMockRouterServer creates a new mock instance.
func NewMockRouterServer(ctrl *gomock.Controller) *MockRouterServer {
	mock := &MockRouterServer{ctrl: ctrl}
	mock.recorder = &MockRouterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterServer) EXPECT() *MockRouterServerMockRecorder {
	return m.recorder
}

// Route mocks base method.
func (m *MockRouterServer) Route(arg0 context.Context, arg1 *router.RouteRequest) (*router.RouteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", arg0, arg1)
	ret0, _ := ret[0].(*router.RouteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Route indicates an expected call of Route.
func (mr *MockRouterServerMockRecorder) Route(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouterServer)(nil).Route), arg0, arg1)
}

// SetRoutingRule mocks base method.
func (m *MockRouterServer) SetRoutingRule(arg0 context.Context, arg1 *router.SetRoutingRuleRequest) (*router.SetRoutingRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoutingRule", arg0, arg1)
	ret0, _ := ret[0].(*router.SetRoutingRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRoutingRule indicates an expected call of SetRoutingRule.
func (mr *MockRouterServerMockRecorder) SetRoutingRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoutingRule", reflect.TypeOf((*MockRouterServer)(nil).SetRoutingRule), arg0, arg1)
}

// mustEmbedUnimplementedRouterServer mocks base method.
func (m *MockRouterServer) mustEmbedUnimplementedRouterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServer")
}

// mustEmbedUnimplementedRouterServer indicates an expected call of mustEmbedUnimplementedRouterServer.
func (mr *MockRouterServerMockRecorder) mustEmbedUnimplementedRouterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServer", reflect.TypeOf((*MockRouterServer)(nil).mustEmbedUnimplementedRouterServer))
}

// MockUnsafeRouterServer is a mock of UnsafeRouterServer interface.
type MockUnsafeRouterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRouterServerMockRecorder
}

// MockUnsafeRouterServerMockRecorder is the mock recorder for MockUnsafeRouterServer.
type MockUnsafeRouterServerMockRecorder struct {
	mock *MockUnsafeRouterServer
}

// NewMockUnsafeRouterServer creates a new mock instance.
func NewMockUnsafeRouterServer(ctrl *gomock.Controller) *MockUnsafeRouterServer {
	mock := &MockUnsafeRouterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRouterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRouterServer) EXPECT() *MockUnsafeRouterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRouterServer mocks base method.
func (m *MockUnsafeRouterServer) mustEmbedUnimplementedRouterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouterServer")
}

// mustEmbedUnimplementedRouterServer indicates an expected call of mustEmbedUnimplementedRouterServer.
func (mr *MockUnsafeRouterServerMockRecorder) mustEmbedUnimplementedRouterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouterServer", reflect.TypeOf((*MockUnsafeRouterServer)(nil).mustEmbedUnimplementedRouterServer))
}
