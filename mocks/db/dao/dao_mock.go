// Code generated by MockGen. DO NOT EDIT.
// Source: db/dao/dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	client "paymentGateway/api/client"
	pay "paymentGateway/api/pay"
	rules "paymentGateway/router/rules"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientDao is a mock of ClientDao interface.
type MockClientDao struct {
	ctrl     *gomock.Controller
	recorder *MockClientDaoMockRecorder
}

// MockClientDaoMockRecorder is the mock recorder for MockClientDao.
type MockClientDaoMockRecorder struct {
	mock *MockClientDao
}

// NewMockClientDao creates a new mock instance.
func NewMockClientDao(ctrl *gomock.Controller) *MockClientDao {
	mock := &MockClientDao{ctrl: ctrl}
	mock.recorder = &MockClientDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientDao) EXPECT() *MockClientDaoMockRecorder {
	return m.recorder
}

// AddClient mocks base method.
func (m *MockClientDao) AddClient(arg0 *client.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClient", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClient indicates an expected call of AddClient.
func (mr *MockClientDaoMockRecorder) AddClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClient", reflect.TypeOf((*MockClientDao)(nil).AddClient), arg0)
}

// DeleteClientByCode mocks base method.
func (m *MockClientDao) DeleteClientByCode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientByCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientByCode indicates an expected call of DeleteClientByCode.
func (mr *MockClientDaoMockRecorder) DeleteClientByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientByCode", reflect.TypeOf((*MockClientDao)(nil).DeleteClientByCode), arg0)
}

// HasClient mocks base method.
func (m *MockClientDao) HasClient(arg0 *client.Client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasClient", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasClient indicates an expected call of HasClient.
func (mr *MockClientDaoMockRecorder) HasClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasClient", reflect.TypeOf((*MockClientDao)(nil).HasClient), arg0)
}

// MockPayModeDao is a mock of PayModeDao interface.
type MockPayModeDao struct {
	ctrl     *gomock.Controller
	recorder *MockPayModeDaoMockRecorder
}

// MockPayModeDaoMockRecorder is the mock recorder for MockPayModeDao.
type MockPayModeDaoMockRecorder struct {
	mock *MockPayModeDao
}

// NewMockPayModeDao creates a new mock instance.
func NewMockPayModeDao(ctrl *gomock.Controller) *MockPayModeDao {
	mock := &MockPayModeDao{ctrl: ctrl}
	mock.recorder = &MockPayModeDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayModeDao) EXPECT() *MockPayModeDaoMockRecorder {
	return m.recorder
}

// AddPayMode mocks base method.
func (m *MockPayModeDao) AddPayMode(arg0 *pay.PayMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayMode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPayMode indicates an expected call of AddPayMode.
func (mr *MockPayModeDaoMockRecorder) AddPayMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayMode", reflect.TypeOf((*MockPayModeDao)(nil).AddPayMode), arg0)
}

// AddPayModeForClient mocks base method.
func (m *MockPayModeDao) AddPayModeForClient(arg0 *pay.PayMode, arg1 *client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayModeForClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPayModeForClient indicates an expected call of AddPayModeForClient.
func (mr *MockPayModeDaoMockRecorder) AddPayModeForClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayModeForClient", reflect.TypeOf((*MockPayModeDao)(nil).AddPayModeForClient), arg0, arg1)
}

// DeletePayMode mocks base method.
func (m *MockPayModeDao) DeletePayMode(arg0 *pay.PayMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayMode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayMode indicates an expected call of DeletePayMode.
func (mr *MockPayModeDaoMockRecorder) DeletePayMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayMode", reflect.TypeOf((*MockPayModeDao)(nil).DeletePayMode), arg0)
}

// DeletePayModeForClient mocks base method.
func (m *MockPayModeDao) DeletePayModeForClient(arg0 *pay.PayMode, arg1 *client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayModeForClient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayModeForClient indicates an expected call of DeletePayModeForClient.
func (mr *MockPayModeDaoMockRecorder) DeletePayModeForClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayModeForClient", reflect.TypeOf((*MockPayModeDao)(nil).DeletePayModeForClient), arg0, arg1)
}

// ListPayModes mocks base method.
func (m *MockPayModeDao) ListPayModes() ([]pay.PayModes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayModes")
	ret0, _ := ret[0].([]pay.PayModes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayModes indicates an expected call of ListPayModes.
func (mr *MockPayModeDaoMockRecorder) ListPayModes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayModes", reflect.TypeOf((*MockPayModeDao)(nil).ListPayModes))
}

// ListPayModesOfClient mocks base method.
func (m *MockPayModeDao) ListPayModesOfClient() ([]pay.PayModes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayModesOfClient")
	ret0, _ := ret[0].([]pay.PayModes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayModesOfClient indicates an expected call of ListPayModesOfClient.
func (mr *MockPayModeDaoMockRecorder) ListPayModesOfClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayModesOfClient", reflect.TypeOf((*MockPayModeDao)(nil).ListPayModesOfClient))
}

// MockRoutingRuleDao is a mock of RoutingRuleDao interface.
type MockRoutingRuleDao struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingRuleDaoMockRecorder
}

// MockRoutingRuleDaoMockRecorder is the mock recorder for MockRoutingRuleDao.
type MockRoutingRuleDaoMockRecorder struct {
	mock *MockRoutingRuleDao
}

// NewMockRoutingRuleDao creates a new mock instance.
func NewMockRoutingRuleDao(ctrl *gomock.Controller) *MockRoutingRuleDao {
	mock := &MockRoutingRuleDao{ctrl: ctrl}
	mock.recorder = &MockRoutingRuleDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutingRuleDao) EXPECT() *MockRoutingRuleDaoMockRecorder {
	return m.recorder
}

// GetRoutingRule mocks base method.
func (m *MockRoutingRuleDao) GetRoutingRule(arg0 string) (rules.RoutingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingRule", arg0)
	ret0, _ := ret[0].(rules.RoutingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutingRule indicates an expected call of GetRoutingRule.
func (mr *MockRoutingRuleDaoMockRecorder) GetRoutingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingRule", reflect.TypeOf((*MockRoutingRuleDao)(nil).GetRoutingRule), arg0)
}

// SetRoutingRule mocks base method.
func (m *MockRoutingRuleDao) SetRoutingRule(arg0 string, arg1 rules.RoutingRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoutingRule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRoutingRule indicates an expected call of SetRoutingRule.
func (mr *MockRoutingRuleDaoMockRecorder) SetRoutingRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoutingRule", reflect.TypeOf((*MockRoutingRuleDao)(nil).SetRoutingRule), arg0, arg1)
}
